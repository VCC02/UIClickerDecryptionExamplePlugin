{
    Copyright (C) 2025 VCC
    creation date: 13 Jan 2025
    initial release date: 14 Jan 2025

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


library UIClickerDecryptionExample;

{$mode objfpc}{$H+}

uses
  Windows,
  Interfaces, Classes, SysUtils,// Graphics, HashingExampleDM, ImgList,
  ClickerActionPlugins, ClickerUtils, DllUtils, ClickerPluginInMemFileSystem,
  DCPrijndael
  ;

var
  AddToLogCallback: TOnActionPlugin_AddToLog;


procedure AddToLog(AMsg: string);  //thread safe
begin
  if @AddToLogCallback <> nil then
    AddToLogCallback(DefaultPluginReference, @AMsg[1]);
end;


function GetAPIVersion: DWord; cdecl;
begin
  Result := CActionPlugin_APIVersion;
end;


procedure GetListOfProperties(APluginReference: Pointer;                 //UIClicker passes the plugin reference to the plugin, then the plugin calls some callbacks with that reference
                              AListOfProperties: Pointer;
                              AListOfPropertiesLen: PDWord;
                              AOnActionPlugin_UpdatePropertyIcons: TOnActionPlugin_UpdatePropertyIcons); cdecl;
//var
//  Properties: string;
//  i: Integer;
//  TempMemStream: TMemoryStream;
//  Bmp: TBitmap;
begin
  //Properties := FillInPropertyDetails;
  //AListOfPropertiesLen^ := SetPointedContentFromString(Properties, AListOfProperties);
  //
  //dmProperties := TdmProperties.Create(nil);
  //try
  //  for i := 0 to CPropertiesCount - 1 do
  //  begin
  //    TempMemStream := TMemoryStream.Create;
  //    Bmp := TBitmap.Create;
  //    try
  //      Bmp.PixelFormat := pf24bit;
  //      Bmp.Width := dmProperties.imglstProperties.Width;
  //      Bmp.Height := dmProperties.imglstProperties.Height;
  //      Bmp.Canvas.Pen.Color := clWhite;
  //      Bmp.Canvas.Brush.Color := clWhite;
  //      Bmp.Canvas.Rectangle(0, 0, Bmp.Width, Bmp.Height);
  //
  //      dmProperties.imglstProperties.Draw(Bmp.Canvas, 0, 0, i, dsNormal, itImage);
  //      Bmp.SaveToStream(TempMemStream);
  //
  //      AOnActionPlugin_UpdatePropertyIcons(APluginReference, TempMemStream.Memory, TempMemStream.Size);
  //    finally
  //      TempMemStream.Free;
  //      Bmp.Free;
  //    end;
  //  end;
  //finally
  //  dmProperties.Free;
  //end;
end;


function ExecutePlugin(APluginReference: Pointer;
                       AListOfPluginSettings: Pointer;
                       AListOfPluginSettingsLen: PDWord;

                       AOnActionPlugin_GetActionCount: TOnActionPlugin_GetActionCount;
                       AOnActionPlugin_GetActionInfoByIndex: TOnActionPlugin_GetActionInfoByIndex;
                       AOnActionPlugin_GetActionContentByIndex: TOnActionPlugin_GetActionContentByIndex;
                       AOnActionPlugin_ExecuteAction: TOnActionPlugin_ExecuteAction;
                       AOnActionPlugin_GetAllTemplateVars: TOnActionPlugin_GetAllTemplateVars;
                       AOnActionPlugin_SetTemplateVar: TOnActionPlugin_SetTemplateVar;
                       AOnActionPlugin_DebugPoint: TOnActionPlugin_DebugPoint;
                       AOnActionPlugin_AddToLog: TOnActionPlugin_AddToLog;
                       AOnActionPlugin_SetResultImg: TOnActionPlugin_SetResultImg;
                       AOnActionPlugin_LoadBitmap: TOnActionPlugin_LoadBitmap;
                       AOnActionPlugin_GetAllowedFilesInfo: TOnActionPlugin_GetAllowedFilesInfo;
                       AOnActionPlugin_SetBitmap: TOnActionPlugin_SetBitmap;
                       AOnActionPlugin_Screenshot: TOnActionPlugin_Screenshot;
                       AOnActionPlugin_CheckStopAllActionsOnDemand: TOnActionPlugin_CheckStopAllActionsOnDemand
                       ): Boolean; cdecl;
begin
  Result := True;
end;


var
  FKey: string;
  FKeySet: Boolean = False;


function ProcessMemoryContent(AInData: Pointer; AInDataLen: Int64; AOnFileContent: TOnFileContentObj): Integer; cdecl;
var
  AES: TDCP_rijndael;
  i: Integer;
  Key: array[0..31] of Byte;
  DecryptedStream: TMemoryStream; //For this example, the same stream can be used.
begin
  Result := AInDataLen;  //not used for now

  AES := TDCP_rijndael.Create(nil);
  try
    FillChar(Key, Length(Key), 0);
    if FKeySet then
    begin
      Move(FKey[1], Key, Length(Key));
      FillChar(FKey[1], Length(FKey), '0');
    end;

    AES.Init(Key, Length(Key) shl 3, nil);

    try
      DecryptedStream := TMemoryStream.Create;
      try
        DecryptedStream.SetSize(AInDataLen);
        for i := 0 to DecryptedStream.Size shr 4 - 1 do   //ALen2 is ALen1 + padding
          AES.DecryptECB(Pointer(UInt64(AInData) + i shl 4)^, Pointer(UInt64(DecryptedStream.Memory) + i shl 4)^);

        AOnFileContent(DecryptedStream.Memory, DecryptedStream.Size);
      finally
        DecryptedStream.Free;
      end;
    finally
      AES.Burn;
    end;
  finally
    AES.Free;
  end;

  //Xor example
  //for i := 0 to ALen1 - 1 do
  //  PByte(Pointer(UInt64(AData2) + i))^ := PByte(Pointer(UInt64(AData1) + i))^ xor 3;
end;


function ConfigurePluginForMemoryContent(AOnActionPlugin_InMemFS: TOnActionPlugin_InMemFS_Obj): Boolean; cdecl;
const
  CKeyFileName: string = 'Mem:\Key.txt';
  CUseKeyFileName: string = 'Mem:\UseKey.txt';
var
  PluginInMemFS: TPluginInMemFileSystem;
  UseKeyInfo: string;
begin
  Result := True;
  FKeySet := False;  //init also here

  PluginInMemFS := TPluginInMemFileSystem.Create;
  try
    if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CUseKeyFileName) then
    begin
      SetLength(UseKeyInfo, PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CUseKeyFileName));
      PluginInMemFS.LoadFileFromMem(AOnActionPlugin_InMemFS, CUseKeyFileName, @UseKeyInfo[1]);
    end;

    if UseKeyInfo = 'True' then
      if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CKeyFileName) then
      begin
        FKeySet := True;
        //read key from file
        SetLength(FKey, PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CKeyFileName));
        PluginInMemFS.LoadFileFromMem(AOnActionPlugin_InMemFS, CKeyFileName, @FKey[1]);
      end;
  finally
    PluginInMemFS.Free
  end;
end;


exports
  GetAPIVersion,
  GetListOfProperties,
  ExecutePlugin,
  ProcessMemoryContent,
  ConfigurePluginForMemoryContent;

begin
  FKeySet := False;  //init again here
end.

